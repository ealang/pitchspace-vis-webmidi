// Generated by CoffeeScript 1.4.0
(function() {
  var App, F, INITMODE, INITTONIC, MODES, MidiInstance, S, TONICS, colorGen, decodeMidiEvent, getNoteName, getTeoriaScale, noteLabelToInt,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  S = "\u266F";

  F = "\u266D";

  noteLabelToInt = {
    "c": 0,
    "d": 2,
    "e": 4,
    "f": 5,
    "g": 7,
    "a": 9,
    "b": 11
  };

  getNoteName = function(noteLabel, accidentalStep) {
    return noteLabel.toUpperCase() + (function() {
      switch (accidentalStep) {
        case 0:
          return '';
        case 1:
          return S;
        case 2:
          return S + S;
        case -1:
          return F;
        case -2:
          return F + F;
        default:
          return '?';
      }
    })();
  };

  getTeoriaScale = function(modeLabel, tonicLabel) {
    var teoriaLabel;
    teoriaLabel = function(str) {
      return str.toLowerCase().replace(/\u266F/g, '#').replace(/\u266D/g, 'b');
    };
    return teoria.scale(teoriaLabel(tonicLabel), teoriaLabel(modeLabel));
  };

  window.getScale = function(modeLabel, tonicLabel) {
    var scale;
    scale = getTeoriaScale(modeLabel, tonicLabel);
    return scale.notes.map(function(n, i) {
      return {
        label: getNoteName(n.name, n.accidental.value),
        step: (noteLabelToInt[n.name] + 12 + n.accidental.value) % 12,
        triad: scale.scale[i]
      };
    });
  };

  decodeMidiEvent = function(event) {
    var d1, d2, d3, noteOff, noteOn, _ref;
    _ref = event.data, d1 = _ref[0], d2 = _ref[1], d3 = _ref[2];
    noteOn = (d1 & 0xF0) === 0x90;
    noteOff = (d1 & 0xF0) === 0x80;
    return {
      isNoteEvent: noteOn || noteOff,
      noteOn: noteOn,
      velocity: d3,
      noteNum: d2
    };
  };

  MidiInstance = (function() {

    function MidiInstance(access) {
      var _this = this;
      this.inputs = access != null ? access.inputs() : void 0;
      this.userCallback = null;
      this.selectedInput = null;
      this.isValid = access !== null;
      this.onmidimessage = function(event) {
        var note;
        note = decodeMidiEvent(event);
        if (_this.userCallback !== null && note.isNoteEvent) {
          return _this.userCallback(note);
        }
      };
    }

    MidiInstance.prototype.selectDevice = function(id) {
      if (this.selectedInput !== null) {
        this.inputs[this.selectedInput].removeEventListener("midimessage", this.onmidimessage);
      }
      this.selectedInput = id;
      return this.inputs[id].addEventListener("midimessage", this.onmidimessage, false);
    };

    MidiInstance.prototype.getDevicesList = function() {
      var input, _i, _len, _ref, _results;
      _ref = this.inputs || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        _results.push(input.name);
      }
      return _results;
    };

    MidiInstance.prototype.onKeyPress = function(callback) {
      return this.userCallback = callback;
    };

    return MidiInstance;

  })();

  window.startMidi = function(callback) {
    var onerrorcallback, onsuccesscallback;
    onsuccesscallback = function(access) {
      return callback(new MidiInstance(access));
    };
    onerrorcallback = function(err) {
      console.log("Error initializing midi: " + err.code);
      return callback(new MidiInstance(null));
    };
    return navigator.requestMIDIAccess().then(onsuccesscallback, onerrorcallback);
  };

  window.View = (function() {
    var PI, RELEASE_TIME, getNoteAngle, layers, makeNoteArc, scaling, toggleSettingsPage;

    PI = 3.1416;

    RELEASE_TIME = 1000;

    scaling = (function() {
      var INNERR, MIDDLER, OUTERR, SEGPADDING;
      INNERR = 100 / 3.7;
      OUTERR = 100 / 2.3;
      MIDDLER = (INNERR + OUTERR) / 2;
      SEGPADDING = 0.7;
      return {
        segPadding: SEGPADDING,
        size: 100,
        innerR: INNERR,
        outerR: OUTERR,
        middleR: MIDDLER,
        segPaddingR: SEGPADDING / MIDDLER
      };
    })();

    getNoteAngle = function(i) {
      return ((i + 9) % 12) * 2 * PI / 12;
    };

    makeNoteArc = function(i) {
      var endAngle, note, offsetR, startAngle;
      note = (i + 12) % 12;
      offsetR = 2 * PI / 24;
      startAngle = i / 12 * 2 * PI - 1 / 12 * PI;
      endAngle = startAngle + 1 / 12 * 2 * PI;
      return d3.svg.arc().innerRadius(scaling.innerR + scaling.segPadding).outerRadius(scaling.outerR - scaling.segPadding).startAngle(startAngle + scaling.segPaddingR / 2).endAngle(endAngle - scaling.segPaddingR / 2)();
    };

    layers = (function() {
      var l, svg, svgApp, svgRoot, tonicLists;
      svg = d3.select("#circle").attr("width", "100%").attr("height", "100%").attr("viewBox", "0 0 100 100").attr("preserveAspectRatio", "xMidYMid");
      svgRoot = svg.append("g").attr("transform", "translate(50,50)");
      svgApp = svgRoot.append("g");
      tonicLists = d3.selectAll("ul.settings-tonic")[0];
      return {
        root: svg,
        background: svgApp.append("g"),
        sustain: svgApp.append("g"),
        release: svgApp.append("g"),
        attack: svgApp.append("g"),
        noteLabels: svgApp.append("g").attr("id", "ring-note-labels"),
        degreeLabels: svgApp.append("g").attr("id", "ring-degree-labels"),
        keyName: svgApp.append("g").attr("id", "selected-key"),
        settingsTonics: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = tonicLists.length; _i < _len; _i++) {
            l = tonicLists[_i];
            _results.push(d3.select(l));
          }
          return _results;
        })(),
        settingsMode: d3.select("#settings-mode"),
        settingsDevices: d3.select("#settings-devices-list"),
        settingsBackground: d3.select("#settings-background"),
        errorMsg: d3.select("#midi-error-msg")
      };
    })();

    toggleSettingsPage = function() {
      var curDisp, settings;
      settings = d3.select("#settings");
      curDisp = settings.style("display");
      return settings.style("display", curDisp !== "none" ? "none" : "block");
    };

    function View(noteColors) {
      this.noteColors = noteColors;
      this.onClickSettings = null;
    }

    View.prototype.init = function() {
      var buttonR, ring;
      ring = d3.svg.arc().innerRadius(scaling.innerR).outerRadius(scaling.outerR).startAngle(0).endAngle(2 * PI);
      buttonR = scaling.size * 0.07;
      layers.root.on("click", function() {
        return toggleSettingsPage();
      });
      layers.keyName.append("text").text("").attr("dy", "0.1em");
      layers.background.append("g").attr("id", "ring-background").append("path").attr("d", ring);
      return layers.background.append("g").attr("id", "ring-segments").selectAll("path").data(d3.range(0, 12)).enter().append("path").attr("d", makeNoteArc);
    };

    View.prototype.drawSettingsPage = function(modeList, tonicList, devicesList, selectedMode, selectedTonic, selectedDev) {
      var attachClickHandler, drawSelection, listsize, ulify;
      listsize = tonicList.length / 2;
      ulify = function(data) {
        return function(sel) {
          var context;
          context = sel.selectAll("li").data(data);
          context.enter().append("li");
          return context.text(function(label) {
            return label;
          }).attr("class", "list-item");
        };
      };
      drawSelection = function(selectors, index) {
        return selectors.forEach(function(selector, i) {
          var lis;
          lis = selector.selectAll("li");
          lis.attr("class", "list-item");
          if (index >= (i * listsize) && index < ((i + 1) * listsize)) {
            return d3.select(lis[0][index % listsize]).attr("class", "selected list-item");
          }
        });
      };
      attachClickHandler = function(selectors, label, handler) {
        return selectors.forEach(function(selector, selIndex) {
          return selector.selectAll(".list-item").on("click", function(text, i) {
            var item;
            item = selIndex * listsize + i;
            drawSelection(selectors, item);
            return handler(label, item);
          });
        });
      };
      layers.settingsTonics[0].call(ulify(tonicList.slice(0, listsize)));
      layers.settingsTonics[1].call(ulify(tonicList.slice(listsize, listsize * 2)));
      layers.settingsMode.call(ulify(modeList));
      layers.settingsDevices.call(ulify(devicesList));
      drawSelection([layers.settingsDevices], selectedDev);
      drawSelection([layers.settingsMode], selectedMode);
      drawSelection(layers.settingsTonics, selectedTonic);
      attachClickHandler([layers.settingsDevices], "device", this.onClickSettings);
      attachClickHandler([layers.settingsMode], "mode", this.onClickSettings);
      attachClickHandler(layers.settingsTonics, "tonic", this.onClickSettings);
      return layers.settingsBackground.on("click", function() {
        return toggleSettingsPage();
      });
    };

    View.prototype.drawAppPage = function(modeLabel, tonicLabel, scale) {
      var degLabelR,
        _this = this;
      degLabelR = scaling.innerR * 0.9;
      layers.attack.selectAll("path").remove();
      layers.release.selectAll("path").remove();
      layers.sustain.selectAll("path").remove();
      layers.keyName.select("text").text(modeLabel).style("fill", this.noteColors(scale[0].step));
      (function() {
        var degreeName, sel;
        degreeName = function(note, i) {
          var degree;
          degree = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii'][i];
          switch (note.triad) {
            case "major":
              return degree.toUpperCase();
            case "dim":
              return degree + "\u00B0";
            case "aug":
              return degree.toUpperCase() + "+";
            case "minor":
              return degree;
            default:
              return "?";
          }
        };
        sel = layers.degreeLabels.selectAll("text").data(scale, function(note, i) {
          return i;
        });
        sel.enter().append("text").attr("dy", "0.3em");
        sel.text(function(note) {
          return note.triad;
        }).transition().attr("x", function(note) {
          return degLabelR * Math.cos(getNoteAngle(note.step));
        }).attr("y", function(note) {
          return degLabelR * Math.sin(getNoteAngle(note.step));
        }).style("fill", function(note) {
          return _this.noteColors(note.step);
        });
        return sel.exit().remove();
      })();
      return (function() {
        var sel;
        scale = getScale(modeLabel, tonicLabel);
        sel = layers.noteLabels.selectAll("text").data(scale);
        sel.enter().append("text").attr("dy", "0.3em");
        sel.text(function(note, i) {
          return note.label;
        }).attr("x", function(note) {
          return scaling.middleR * Math.cos(getNoteAngle(note.step));
        }).attr("y", function(note) {
          return scaling.middleR * Math.sin(getNoteAngle(note.step));
        });
        return sel.exit().remove();
      })();
    };

    View.prototype.drawActiveNotes = function(notes) {
      var sel,
        _this = this;
      sel = layers.sustain.selectAll("path").data(notes, function(note) {
        return note;
      });
      sel.enter().append("path").attr("d", function(note) {
        return makeNoteArc(note);
      }).attr("fill", function(note) {
        return _this.noteColors(note);
      });
      return sel.exit().remove();
    };

    View.prototype.drawNoteRelease = function(note) {
      return layers.release.append("path").attr("d", makeNoteArc(note)).attr("fill", this.noteColors(note)).style("opacity", 1).transition().duration(RELEASE_TIME).ease(function(t) {
        return 1 - Math.pow(1 - t, 3);
      }).style("opacity", "0").remove();
    };

    View.prototype.drawNoteAttack = function(note, velocity) {
      return layers.attack.append("path").attr("d", makeNoteArc(note)).style("opacity", 0.1 + (velocity / 127) * 0.9).style("fill", "white").transition().duration("300").style("opacity", "0").remove();
    };

    View.prototype.showError = function() {
      return layers.errorMsg.style("display", "block");
    };

    return View;

  })();

  S = "\u266F";

  F = "\u266D";

  INITMODE = 1;

  INITTONIC = 0;

  MODES = ["Lydian", "Ionian", "Mixolydian", "Dorian", "Aeolian", "Phrygian", "Locrian"];

  TONICS = ["C", "C" + S, "D", "D" + S, "E", "F", "F" + S, "G", "G" + S, "A", "A" + S, "B", "C", "D" + F, "D", "E" + F, "E", "F", "G" + F, "G", "A" + F, "A", "B" + F, "B"];

  App = (function() {

    function App(view, midi) {
      var activeNotes, devices, drawApp, selected;
      activeNotes = [];
      selected = {
        mode: INITMODE,
        tonic: INITTONIC,
        device: 0
      };
      devices = midi.getDevicesList();
      if (devices.length >= 1) {
        midi.selectDevice(0);
      }
      drawApp = function() {
        return view.drawAppPage(MODES[selected.mode], TONICS[selected.tonic], getScale(MODES[selected.mode], TONICS[selected.tonic]));
      };
      view.onClickSettings = function(option, val) {
        var activeNodes;
        switch (option) {
          case "mode":
            selected.mode = val;
            break;
          case "tonic":
            selected.tonic = val;
            break;
          case "device":
            selected.device = val;
            midi.selectDevice(val);
            activeNodes = [];
        }
        return drawApp();
      };
      view.drawSettingsPage(MODES, TONICS, devices, selected.mode, selected.tonic, selected.device);
      drawApp();
      midi.onKeyPress(function(event) {
        var _ref, _ref1;
        if (event.noteOn === true && (_ref = event.noteNum, __indexOf.call(activeNotes, _ref) >= 0) === false) {
          activeNotes.push(event.noteNum);
          view.drawNoteAttack(event.noteNum, event.velocity);
        } else if (event.noteOn === false && (_ref1 = event.noteNum, __indexOf.call(activeNotes, _ref1) >= 0)) {
          activeNotes.splice(activeNotes.indexOf(event.noteNum), 1);
          view.drawNoteRelease(event.noteNum);
        }
        return view.drawActiveNotes(activeNotes);
      });
    }

    return App;

  })();

  colorGen = function(note_num) {
    var c, comp, digit, hue, m, sat, val, x;
    sat = 0.6;
    val = 0.7;
    hue = ((note_num * 7) % 12) / 12 * 360;
    c = val * sat;
    x = c * (1 - Math.abs((hue / 60) % 2 - 1));
    m = val - c;
    comp = (0 <= hue && hue < 60) ? [c, x, 0] : (60 <= hue && hue < 120) ? [x, c, 0] : (120 <= hue && hue < 180) ? [0, c, x] : (180 <= hue && hue < 240) ? [0, x, c] : (240 <= hue && hue < 300) ? [x, 0, c] : (300 <= hue && hue < 360) ? [c, 0, x] : void 0;
    return "#" + ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = comp.length; _i < _len; _i++) {
        c = comp[_i];
        digit = Math.floor((c + m) * 255).toString(16);
        if (digit.length === 2) {
          _results.push(digit);
        } else {
          _results.push("0" + digit);
        }
      }
      return _results;
    })()).join("");
  };

  startMidi(function(midi) {
    var view;
    view = new View(colorGen);
    view.init();
    if (!midi.isValid) {
      view.showError();
    }
    return new App(view, midi);
  });

}).call(this);
